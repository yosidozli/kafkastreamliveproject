/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.yosidozli;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EventRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1659501710519232809L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventRecord\",\"namespace\":\"com.yosidozli\",\"fields\":[{\"name\":\"uuid\",\"type\":\"string\"},{\"name\":\"arrival_ts\",\"type\":[\"long\",\"null\"]},{\"name\":\"bytes\",\"type\":[\"bytes\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence uuid;
  @Deprecated public java.lang.Long arrival_ts;
  @Deprecated public java.nio.ByteBuffer bytes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public EventRecord() {}

  /**
   * All-args constructor.
   */
  public EventRecord(java.lang.CharSequence uuid, java.lang.Long arrival_ts, java.nio.ByteBuffer bytes) {
    this.uuid = uuid;
    this.arrival_ts = arrival_ts;
    this.bytes = bytes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return arrival_ts;
    case 2: return bytes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.CharSequence)value$; break;
    case 1: arrival_ts = (java.lang.Long)value$; break;
    case 2: bytes = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   */
  public java.lang.CharSequence getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.CharSequence value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'arrival_ts' field.
   */
  public java.lang.Long getArrivalTs() {
    return arrival_ts;
  }

  /**
   * Sets the value of the 'arrival_ts' field.
   * @param value the value to set.
   */
  public void setArrivalTs(java.lang.Long value) {
    this.arrival_ts = value;
  }

  /**
   * Gets the value of the 'bytes' field.
   */
  public java.nio.ByteBuffer getBytes() {
    return bytes;
  }

  /**
   * Sets the value of the 'bytes' field.
   * @param value the value to set.
   */
  public void setBytes(java.nio.ByteBuffer value) {
    this.bytes = value;
  }

  /**
   * Creates a new EventRecord RecordBuilder.
   * @return A new EventRecord RecordBuilder
   */
  public static com.yosidozli.EventRecord.Builder newBuilder() {
    return new com.yosidozli.EventRecord.Builder();
  }
  
  /**
   * Creates a new EventRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EventRecord RecordBuilder
   */
  public static com.yosidozli.EventRecord.Builder newBuilder(com.yosidozli.EventRecord.Builder other) {
    return new com.yosidozli.EventRecord.Builder(other);
  }
  
  /**
   * Creates a new EventRecord RecordBuilder by copying an existing EventRecord instance.
   * @param other The existing instance to copy.
   * @return A new EventRecord RecordBuilder
   */
  public static com.yosidozli.EventRecord.Builder newBuilder(com.yosidozli.EventRecord other) {
    return new com.yosidozli.EventRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for EventRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventRecord>
    implements org.apache.avro.data.RecordBuilder<EventRecord> {

    private java.lang.CharSequence uuid;
    private java.lang.Long arrival_ts;
    private java.nio.ByteBuffer bytes;

    /** Creates a new Builder */
    private Builder() {
      super(com.yosidozli.EventRecord.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.yosidozli.EventRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.arrival_ts)) {
        this.arrival_ts = data().deepCopy(fields()[1].schema(), other.arrival_ts);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bytes)) {
        this.bytes = data().deepCopy(fields()[2].schema(), other.bytes);
        fieldSetFlags()[2] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing EventRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.yosidozli.EventRecord other) {
            super(com.yosidozli.EventRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.arrival_ts)) {
        this.arrival_ts = data().deepCopy(fields()[1].schema(), other.arrival_ts);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.bytes)) {
        this.bytes = data().deepCopy(fields()[2].schema(), other.bytes);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'uuid' field.
      * @return The value.
      */
    public java.lang.CharSequence getUuid() {
      return uuid;
    }

    /**
      * Sets the value of the 'uuid' field.
      * @param value The value of 'uuid'.
      * @return This builder.
      */
    public com.yosidozli.EventRecord.Builder setUuid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'uuid' field has been set.
      * @return True if the 'uuid' field has been set, false otherwise.
      */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uuid' field.
      * @return This builder.
      */
    public com.yosidozli.EventRecord.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrival_ts' field.
      * @return The value.
      */
    public java.lang.Long getArrivalTs() {
      return arrival_ts;
    }

    /**
      * Sets the value of the 'arrival_ts' field.
      * @param value The value of 'arrival_ts'.
      * @return This builder.
      */
    public com.yosidozli.EventRecord.Builder setArrivalTs(java.lang.Long value) {
      validate(fields()[1], value);
      this.arrival_ts = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'arrival_ts' field has been set.
      * @return True if the 'arrival_ts' field has been set, false otherwise.
      */
    public boolean hasArrivalTs() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'arrival_ts' field.
      * @return This builder.
      */
    public com.yosidozli.EventRecord.Builder clearArrivalTs() {
      arrival_ts = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'bytes' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getBytes() {
      return bytes;
    }

    /**
      * Sets the value of the 'bytes' field.
      * @param value The value of 'bytes'.
      * @return This builder.
      */
    public com.yosidozli.EventRecord.Builder setBytes(java.nio.ByteBuffer value) {
      validate(fields()[2], value);
      this.bytes = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'bytes' field has been set.
      * @return True if the 'bytes' field has been set, false otherwise.
      */
    public boolean hasBytes() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'bytes' field.
      * @return This builder.
      */
    public com.yosidozli.EventRecord.Builder clearBytes() {
      bytes = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public EventRecord build() {
      try {
        EventRecord record = new EventRecord();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.arrival_ts = fieldSetFlags()[1] ? this.arrival_ts : (java.lang.Long) defaultValue(fields()[1]);
        record.bytes = fieldSetFlags()[2] ? this.bytes : (java.nio.ByteBuffer) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
